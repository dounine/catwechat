app {
    name = "catwechat"
    pro = false
    pro = ${?pro}
    noSign = false
    routerPrefix = "api"
    routerPrefix = ${?router_prefix}
    limitMoney = 100
    limitMoney = ${?limit_money}
    qrcodeUrls = ${?qrcode_urls}
    # 发送消息接口
    messageUrl = ""
    # 实例id
    wId = ""
    # 群主微信
    wcId = ""
    # 授权token
    authorization = ""
    jwt {
        secret = "abc123"
        expire = "3000days"
    }
    notify {
        system_notify = ""
        phone_pay_success = ""
        phone_pay_fail = ""
    }
    server {
        host = "0.0.0.0"
        host = ${?server_host}
        port = 40000
        port = ${?server_port}
    }
    file {
        domain = "douyin.61week.com"
        domain = ${?file_domain}
        directory = "/tmp/qrcode"
        directory = ${?file_directory}
    }
    selenium {
        remoteUrl = "http://localhost:4444/wd/hub"
        remoteUrl = ${?selenium_remoteUrl}
        implicitlyWait = 2
        headless = false
        proxy {
            port = 30001
        }
        size {
            width = 1440
            height = 900
        }
        pool {
            minIdle = 1
            maxIdle = 1
            maxTotal = 50
            maxWaitMillis = 60000
            minEvictableIdleTimeMillis = 6000000
            timeBetweenEvictionRunsMillis = 1000
            testOnBorrow = true
            blockWhenExhausted = true
        }
    }
    proxy {
        enable = false
        host = "127.0.0.1"
        port = 1087
        timeout = 5s
    }
    redis {
        host = "192.168.1.182"
        host = ${?redis_host}
        port = 6379
        port = ${?redis_port}
        maxIdle = 20
        maxTotal = 100
        maxWaitMillis = -1
        password = ""
        password = ${?redis_password}
    }
    db {
        driver = "com.mysql.cj.jdbc.Driver"
        url = "jdbc:mysql://dev2:3306/douyinpay?useUnicode=true&useSSL=false&characterEncoding=UTF-8"
        url = ${?jdbc_url}
        username = "root"
        username = ${?jdbc_username}
        password = "root"
        password = ${?jdbc_password}
        hikaricp {
            minimumIdle = 3
            maximumPoolSize = 5
            connectionTimeout = 10
            idleTimeout = 60
            maxLifetime = 3600000
            connectionInitSql = "SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci"
        }
    }
    engine {
        trigger {
            speed = 200.milliseconds
            historySize = 100
            maxSize = 1000
        }
        entrust {
            speed = 200.milliseconds
            historySize = 100
            maxSize = 1000
        }
        position {
            speed = 200.milliseconds
        }
    }
}
akka {
    jvm-exit-on-fatal-error = off
    loglevel = "INFO"
    stdout-loglevel = "INFO"
    loglevel = ${?LOGLEVEL}
    stream {
        materializer {
            initial-input-buffer-size = 1
            max-input-buffer-size = 1
        }
    }
    http {
        host-connection-pool.max-connections = 100
        parsing.illegal-header-warnings = off
        parsing {
            max-uri-length = 16k
        }
        client {
            connecting-timeout = 3s
        }
        server {
            # default 20s
            request-timeout = 20s
        }
    }
    cluster {
        log-info = off
        log-info-verbose = off
        min-nr-of-members = 1
        shutdown-after-unsuccessful-join-seed-nodes = 60s

        sharding {
            number-of-shards = 1000
            guardian-name = sharding
            # actor idled auto close
            passivate-idle-entity-after = off
        }
        bootstrap {
            new-cluster-enabled = on
        }
        seed-nodes = ["akka://"${app.name}"@127.0.0.1:"${akka.remote.artery.canonical.port}]
        min-nr-of-members = 1
        auto-down-unreachable-after = 10s
        seed-node-timeout = 10s
        shutdown-after-unsuccessful-join-seed-nodes = 20s
        http.route-providers-read-only = false
    }

    remote.artery {
       canonical {
          hostname = "127.0.0.1"
          port = 25520
          port = ${?REMOTE_PORT}
        }
    }

    io {
        udp {
            max-channels = 100000
            max-channels = ${?udp_max_channels}
        }
    }


    persistence{
        journal.plugin = "jdbc-journal"
        snapshot-store.plugin = "jdbc-snapshot-store"
    }
    discovery {
        method = akka-dns
    }
    management {
        cluster.bootstrap {
            contact-point-discovery {
              discovery-method = akka.discovery
              required-contact-point-nr = 1
            }
        }
    }

    actor {
      typed.extensions = ["com.dounine.catwechat.tools.akka.db.DataSource"]
      provider = cluster
      allow-java-serialization = off
      warn-about-java-serializer-usage = false
      serialize-messages = on
      default-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        throughput = 100
        fork-join-executor {
            parallelism-min = 2
            parallelism-factor = 6.0
            parallelism-max = 10
        }
      }
      serializers {
        java = "akka.serialization.JavaSerializer"
        kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
      }
      serialization-bindings {
        "java.lang.Object" = kryo
        "scala.collection.immutable.Vector" = kryo
        "com.dounine.catwechat.model.models.BaseSerializer" = kryo
      }
    }
}
akka-persistence-jdbc {
    logicalDeletion.enable = false
    shared-databases {
        slick {
            profile = "slick.jdbc.MySQLProfile$"
            db {
                url = ${app.db.url}
                user = ${app.db.username}
                password = ${app.db.password}
                driver = ${app.db.driver}
            }
        }
    }
}
jdbc-journal {
    use-shared-db = "slick"
    # 需要跟com.dounine.catwechat.store.AkkaPersistenerJournalTable中的_tableName一起修改
    tables.journal.tableName = "catwechat_journal"
}
jdbc-snapshot-store {
    use-shared-db = "slick"
    # 需要跟com.dounine.catwechat.store.AkkaPersistenerSnapshotTable中的_tableName一起修改
    tables.snapshot.tableName = "catwechat_snapshot"
}
jdbc-read-journal {
    use-shared-db = "slick"
    # 需要跟com.dounine.catwechat.store.AkkaPersistenerJournalTable中的_tableName一起修改
    tables.journal.tableName = "catwechat_journal"
}